import React, { useState, useEffect } from 'react';
import { 
  FileText, 
  Download, 
  BarChart3, 
  Calendar, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  TrendingUp,
  Building
} from 'lucide-react';
import axios from 'axios';
import toast from 'react-hot-toast';

interface DashboardData {
  total_cases: number;
  pending_cases: number;
  overdue_cases: number;
  completed_cases: number;
  escalated_cases: number;
  upcoming_deadlines: number;
  overdue_deadlines: number;
}

interface OrganizationPerformance {
  organization_name: string;
  total_sars: number;
  responded_on_time: number;
  responded_late: number;
  ignored: number;
  average_response_time: number;
  compliance_rating: number;
}

interface DeadlineData {
  sar_case_id: number;
  case_reference: string;
  organization_name: string;
  deadline_date: string;
  days_remaining: number;
  is_overdue: boolean;
  deadline_type: string;
}

const Reports: React.FC = () => {
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [organizationPerformance, setOrganizationPerformance] = useState<OrganizationPerformance[]>([]);
  const [upcomingDeadlines, setUpcomingDeadlines] = useState<DeadlineData[]>([]);
  const [loading, setLoading] = useState(true);
  const [reportType, setReportType] = useState<'overview' | 'performance' | 'deadlines'>('overview');

  useEffect(() => {
    fetchReportData();
  }, []);

  const fetchReportData = async () => {
    try {
      setLoading(true);
      
      // Fetch dashboard overview
      const overviewResponse = await axios.get('/dashboard/overview');
      setDashboardData(overviewResponse.data);
      
      // Fetch organization performance
      const performanceResponse = await axios.get('/dashboard/organization-performance');
      setOrganizationPerformance(performanceResponse.data);
      
      // Fetch upcoming deadlines
      const deadlinesResponse = await axios.get('/dashboard/deadlines?days=30');
      setUpcomingDeadlines(deadlinesResponse.data);
      
    } catch (error) {
      console.error('Error fetching report data:', error);
      toast.error('Failed to load report data');
    } finally {
      setLoading(false);
    }
  };

  const generateOverallReport = async () => {
    try {
      const response = await axios.get('/reports/overall');
      
      // Create a formatted report from the JSON data
      const reportData = response.data;
      
      // Create a formatted text report
      const reportContent = `SAR TRACKING SYSTEM - OVERALL REPORT

Generated: ${new Date(reportData.generated_at).toLocaleString()}
User: ${reportData.username}

DASHBOARD SUMMARY:
- Total Cases: ${reportData.dashboard_summary.total_cases}
- Pending Cases: ${reportData.dashboard_summary.pending_cases}
- Overdue Cases: ${reportData.dashboard_summary.overdue_cases}
- Complete Cases: ${reportData.dashboard_summary.completed_cases}
- Escalated Cases: ${reportData.dashboard_summary.escalated_cases}
- Upcoming Deadlines: ${reportData.dashboard_summary.upcoming_deadlines}
- Overdue Deadlines: ${reportData.dashboard_summary.overdue_deadlines}

ORGANIZATION PERFORMANCE:
${reportData.organization_performance.map((org: any) => `
Organization: ${org.organization_name}
- Total SARs: ${org.total_sars}
- Responded On Time: ${org.responded_on_time}
- Responded Late: ${org.responded_late}
- Ignored: ${org.ignored}
- Average Response Time: ${org.average_response_time} days
- Compliance Rating: ${org.compliance_rating}%
`).join('\n')}

---
Report generated by SAR Tracking System
Date: ${new Date().toLocaleDateString()}`;

      // Create and download the text file
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `SAR-System-Report-${new Date().toISOString().split('T')[0]}.txt`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      toast.success('Overall report generated successfully');
    } catch (error) {
      console.error('Error generating overall report:', error);
      toast.error('Failed to generate overall report');
    }
  };

  const generatePerformanceReport = async () => {
    try {
      const response = await axios.get('/reports/performance', {
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `Organization-Performance-Report-${new Date().toISOString().split('T')[0]}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      toast.success('Performance report generated successfully');
    } catch (error) {
      console.error('Error generating performance report:', error);
      toast.error('Failed to generate performance report');
    }
  };

  const exportDataCSV = () => {
    // Create CSV content
    let csvContent = "data:text/csv;charset=utf-8,";
    
    if (reportType === 'overview' && dashboardData) {
      csvContent += "Metric,Value\n";
      csvContent += `Total Cases,${dashboardData.total_cases}\n`;
      csvContent += `Pending Cases,${dashboardData.pending_cases}\n`;
      csvContent += `Overdue Cases,${dashboardData.overdue_cases}\n`;
      csvContent += `Completed Cases,${dashboardData.completed_cases}\n`;
      csvContent += `Escalated Cases,${dashboardData.escalated_cases}\n`;
      csvContent += `Upcoming Deadlines,${dashboardData.upcoming_deadlines}\n`;
      csvContent += `Overdue Deadlines,${dashboardData.overdue_deadlines}\n`;
    } else if (reportType === 'performance' && organizationPerformance.length > 0) {
      csvContent += "Organization,Total SARs,Responded On Time,Responded Late,Ignored,Average Response Time,Compliance Rating\n";
      organizationPerformance.forEach(org => {
        csvContent += `${org.organization_name},${org.total_sars},${org.responded_on_time},${org.responded_late},${org.ignored},${org.average_response_time || 'N/A'},${org.compliance_rating || 'N/A'}\n`;
      });
    } else if (reportType === 'deadlines' && upcomingDeadlines.length > 0) {
      csvContent += "Case Reference,Organization,Deadline Date,Days Remaining,Status\n";
      upcomingDeadlines.forEach(deadline => {
        csvContent += `${deadline.case_reference},${deadline.organization_name},${deadline.deadline_date},${deadline.days_remaining},${deadline.is_overdue ? 'Overdue' : 'Pending'}\n`;
      });
    }
    
    // Download CSV
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', `${reportType}-report-${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    link.remove();
    
    toast.success('Data exported to CSV successfully');
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Reports & Analytics</h1>
          <p className="text-gray-600 mt-1">Generate comprehensive reports and export data</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={generateOverallReport}
            className="btn-primary flex items-center"
          >
            <FileText className="w-4 h-4 mr-2" />
            Generate Overall Report
          </button>
          <button
            onClick={exportDataCSV}
            className="btn-secondary flex items-center"
          >
            <Download className="w-4 h-4 mr-2" />
            Export CSV
          </button>
        </div>
      </div>

      {/* Report Type Selector */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <div className="flex space-x-4">
          <button
            onClick={() => setReportType('overview')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              reportType === 'overview'
                ? 'bg-primary-100 text-primary-700'
                : 'text-gray-600 hover:bg-gray-50'
            }`}
          >
            <BarChart3 className="w-4 h-4 inline mr-2" />
            System Overview
          </button>
          <button
            onClick={() => setReportType('performance')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              reportType === 'performance'
                ? 'bg-primary-100 text-primary-700'
                : 'text-gray-600 hover:bg-gray-50'
            }`}
          >
            <TrendingUp className="w-4 h-4 inline mr-2" />
            Organization Performance
          </button>
          <button
            onClick={() => setReportType('deadlines')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              reportType === 'deadlines'
                ? 'bg-primary-100 text-primary-700'
                : 'text-gray-600 hover:bg-gray-50'
            }`}
          >
            <Calendar className="w-4 h-4 inline mr-2" />
            Deadlines & Compliance
          </button>
        </div>
      </div>

      {/* Report Content */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        {reportType === 'overview' && dashboardData && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">System Overview Report</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <div className="flex items-center">
                  <FileText className="w-8 h-8 text-blue-600 mr-3" />
                  <div>
                    <p className="text-sm font-medium text-blue-600">Total Cases</p>
                    <p className="text-2xl font-bold text-blue-900">{dashboardData.total_cases}</p>
                  </div>
                </div>
              </div>
              <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <div className="flex items-center">
                  <Clock className="w-8 h-8 text-yellow-600 mr-3" />
                  <div>
                    <p className="text-sm font-medium text-yellow-600">Pending Cases</p>
                    <p className="text-2xl font-bold text-yellow-900">{dashboardData.pending_cases}</p>
                  </div>
                </div>
              </div>
              <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                <div className="flex items-center">
                  <AlertTriangle className="w-8 h-8 text-red-600 mr-3" />
                  <div>
                    <p className="text-sm font-medium text-red-600">Overdue Cases</p>
                    <p className="text-2xl font-bold text-red-900">{dashboardData.overdue_cases}</p>
                  </div>
                </div>
              </div>
              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <div className="flex items-center">
                  <CheckCircle className="w-8 h-8 text-green-600 mr-3" />
                  <div>
                    <p className="text-sm font-medium text-green-600">Completed Cases</p>
                    <p className="text-2xl font-bold text-green-900">{dashboardData.completed_cases}</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-medium text-gray-900 mb-3">Deadline Summary</h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Upcoming Deadlines:</span>
                    <span className="font-medium">{dashboardData.upcoming_deadlines}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Overdue Deadlines:</span>
                    <span className="font-medium text-red-600">{dashboardData.overdue_deadlines}</span>
                  </div>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-gray-900 mb-3">Case Status Distribution</h4>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Escalated Cases:</span>
                    <span className="font-medium">{dashboardData.escalated_cases}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Response Rate:</span>
                    <span className="font-medium">
                      {dashboardData.total_cases > 0 
                        ? Math.round(((dashboardData.total_cases - dashboardData.pending_cases) / dashboardData.total_cases) * 100)
                        : 0}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {reportType === 'performance' && (
          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">Organization Performance Report</h3>
              <button
                onClick={generatePerformanceReport}
                className="btn-primary flex items-center"
              >
                <FileText className="w-4 h-4 mr-2" />
                Generate Performance Report
              </button>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Organization
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Total SARs
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      On Time
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Late
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ignored
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Avg Response (Days)
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Compliance Rate
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {organizationPerformance.map((org, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <Building className="w-4 h-4 text-gray-400 mr-2" />
                          <span className="font-medium text-gray-900">{org.organization_name}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{org.total_sars}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600 font-medium">{org.responded_on_time}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-yellow-600 font-medium">{org.responded_late}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 font-medium">{org.ignored}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {org.average_response_time ? Math.round(org.average_response_time) : 'N/A'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                          (org.compliance_rating || 0) >= 80 ? 'bg-green-100 text-green-800' :
                          (org.compliance_rating || 0) >= 60 ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {org.compliance_rating ? `${Math.round(org.compliance_rating)}%` : 'N/A'}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {reportType === 'deadlines' && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">Deadlines & Compliance Report</h3>
            <div className="space-y-4">
              {upcomingDeadlines.map((deadline, index) => (
                <div key={index} className={`p-4 rounded-lg border ${
                  deadline.is_overdue 
                    ? 'bg-red-50 border-red-200' 
                    : deadline.days_remaining <= 7 
                      ? 'bg-yellow-50 border-yellow-200'
                      : 'bg-blue-50 border-blue-200'
                }`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Calendar className={`w-5 h-5 ${
                        deadline.is_overdue 
                          ? 'text-red-600' 
                          : deadline.days_remaining <= 7 
                            ? 'text-yellow-600'
                            : 'text-blue-600'
                      }`} />
                      <div>
                        <h4 className="font-medium text-gray-900">{deadline.case_reference}</h4>
                        <p className="text-sm text-gray-600">{deadline.organization_name}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium text-gray-900">
                        {new Date(deadline.deadline_date).toLocaleDateString()}
                      </p>
                      <p className={`text-xs font-medium ${
                        deadline.is_overdue 
                          ? 'text-red-600' 
                          : deadline.days_remaining <= 7 
                            ? 'text-yellow-600'
                            : 'text-blue-600'
                      }`}>
                        {deadline.is_overdue 
                          ? `${Math.abs(deadline.days_remaining)} days overdue`
                          : `${deadline.days_remaining} days remaining`
                        }
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Reports;
