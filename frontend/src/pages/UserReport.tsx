import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { FileText, Download, BarChart3, AlertTriangle, CheckCircle, Clock, Calendar } from 'lucide-react';
import axios from 'axios';
import toast from 'react-hot-toast';

interface SARCase {
  id: number;
  case_reference: string;
  organization_name: string;
  request_type: string;
  submission_date: string;
  statutory_deadline: string;
  custom_deadline?: string;
  extended_deadline?: string;
  status: string;
  request_description: string;
  organization_email?: string;
  organization_phone?: string;
  organization_address?: string;
  data_administrator_name?: string;
  data_controller_name?: string;
}

const UserReport: React.FC = () => {
  const { user } = useAuth();
  const [cases, setCases] = useState<SARCase[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchCases();
  }, []);

  const fetchCases = async () => {
    try {
      const response = await axios.get('/sar/');
      setCases(response.data);
    } catch (error) {
      console.error('Error fetching cases:', error);
      toast.error('Failed to fetch cases');
    } finally {
      setLoading(false);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Pending':
        return <Clock className="w-4 h-4 text-yellow-500" />;
      case 'Complete':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'Overdue':
        return <AlertTriangle className="w-4 h-4 text-red-500" />;
      case 'Escalated':
        return <AlertTriangle className="w-4 h-4 text-purple-500" />;
      default:
        return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'Complete':
        return 'bg-green-100 text-green-800';
      case 'Overdue':
        return 'bg-red-100 text-red-800';
      case 'Escalated':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredCases = cases.filter(case_ => {
    const matchesFilter = filter === 'all' || case_.status === filter;
    const matchesSearch = case_.organization_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         case_.case_reference.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  const getStats = () => {
    const total = cases.length;
    const pending = cases.filter(c => c.status === 'Pending').length;
    const overdue = cases.filter(c => c.status === 'Overdue').length;
    const complete = cases.filter(c => c.status === 'Complete').length;
    const escalated = cases.filter(c => c.status === 'Escalated').length;

    return { total, pending, overdue, complete, escalated };
  };

  const generateOverallReport = async () => {
    try {
      const response = await axios.get('/reports/overall');
      
      // Create a formatted report from the JSON data
      const reportData = response.data;
      
      // Create a formatted text report
      const reportContent = `SAR TRACKING SYSTEM - OVERALL REPORT

Generated: ${new Date(reportData.generated_at).toLocaleString()}
User: ${reportData.username}

DASHBOARD SUMMARY:
- Total Cases: ${reportData.dashboard_summary.total_cases}
- Pending Cases: ${reportData.dashboard_summary.pending_cases}
- Overdue Cases: ${reportData.dashboard_summary.overdue_cases}
- Complete Cases: ${reportData.dashboard_summary.complete_cases}
- Escalated Cases: ${reportData.dashboard_summary.escalated_cases}
- Upcoming Deadlines: ${reportData.dashboard_summary.upcoming_deadlines}
- Overdue Deadlines: ${reportData.dashboard_summary.overdue_deadlines}

ORGANIZATION PERFORMANCE:
${reportData.organization_performance.map((org: any) => `
Organization: ${org.organization_name}
- Total SARs: ${org.total_sars}
- Responded On Time: ${org.responded_on_time}
- Responded Late: ${org.responded_late}
- Ignored: ${org.ignored}
- Response Rate: ${org.response_rate}%
- Average Response Time: ${org.average_response_time} days
`).join('\n')}

---
Report generated by SAR Tracking System
Date: ${new Date().toLocaleDateString()}`;

      // Create and download the text file
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'SAR-Overall-Report.txt');
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
      
      toast.success('Overall report generated successfully');
    } catch (error) {
      console.error('Error generating report:', error);
      toast.error('Failed to generate overall report');
    }
  };

  const exportToCSV = () => {
    const headers = [
      'Case Reference',
      'Organization',
      'Request Type',
      'Submission Date',
      'Deadline',
      'Status',
      'Data Administrator',
      'Data Controller'
    ];

    const csvData = filteredCases.map(case_ => [
      case_.case_reference,
      case_.organization_name,
      case_.request_type,
      case_.submission_date,
      case_.custom_deadline || case_.extended_deadline || case_.statutory_deadline,
      case_.status,
      case_.data_administrator_name || '',
      case_.data_controller_name || ''
    ]);

    const csvContent = [headers, ...csvData]
      .map(row => row.map(field => `"${field}"`).join(','))
      .join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'SAR-Cases-Export.csv');
    document.body.appendChild(link);
    link.click();
    link.remove();
    window.URL.revokeObjectURL(url);

    toast.success('Data exported to CSV successfully');
  };

  const stats = getStats();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">User Report</h1>
          <p className="text-gray-600">Comprehensive overview of all SAR cases</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={generateOverallReport}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
          >
            <Download className="w-4 h-4 mr-2" />
            Generate Overall Report
          </button>
          <button
            onClick={exportToCSV}
            className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            <Download className="w-4 h-4 mr-2" />
            Export CSV
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div className="bg-white p-4 rounded-lg shadow border">
          <div className="flex items-center">
            <FileText className="w-8 h-8 text-blue-500" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Total Cases</p>
              <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <div className="flex items-center">
            <Clock className="w-8 h-8 text-yellow-500" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Pending</p>
              <p className="text-2xl font-bold text-gray-900">{stats.pending}</p>
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <div className="flex items-center">
            <AlertTriangle className="w-8 h-8 text-red-500" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Overdue</p>
              <p className="text-2xl font-bold text-gray-900">{stats.overdue}</p>
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <div className="flex items-center">
            <CheckCircle className="w-8 h-8 text-green-500" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Complete</p>
              <p className="text-2xl font-bold text-gray-900">{stats.complete}</p>
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <div className="flex items-center">
            <AlertTriangle className="w-8 h-8 text-purple-500" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-500">Escalated</p>
              <p className="text-2xl font-bold text-gray-900">{stats.escalated}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-white p-4 rounded-lg shadow border">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <label htmlFor="search" className="block text-sm font-medium text-gray-700 mb-1">
              Search Cases
            </label>
            <input
              type="text"
              id="search"
              placeholder="Search by organization or case reference..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
            />
          </div>
          <div>
            <label htmlFor="filter" className="block text-sm font-medium text-gray-700 mb-1">
              Filter by Status
            </label>
            <select
              id="filter"
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="all">All Cases</option>
              <option value="Pending">Pending</option>
              <option value="Overdue">Overdue</option>
              <option value="Complete">Complete</option>
              <option value="Escalated">Escalated</option>
            </select>
          </div>
        </div>
      </div>

      {/* Cases Table */}
      <div className="bg-white shadow border rounded-lg overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">
            SAR Cases ({filteredCases.length})
          </h3>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Case Reference
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Organization
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Request Type
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Submission Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Deadline
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredCases.map((case_) => (
                <tr key={case_.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {case_.case_reference}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {case_.organization_name}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {case_.request_type}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(case_.submission_date).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(case_.custom_deadline || case_.extended_deadline || case_.statutory_deadline).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(case_.status)}`}>
                      {getStatusIcon(case_.status)}
                      <span className="ml-1">{case_.status}</span>
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <button
                      onClick={() => window.open(`/cases/${case_.id}`, '_blank')}
                      className="text-primary-600 hover:text-primary-900 font-medium"
                    >
                      View Details
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default UserReport;
